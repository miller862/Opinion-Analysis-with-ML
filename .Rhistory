),
DESIGUALDAD = case_when(
DESIGUALDAD == 1 ~ 1,
DESIGUALDAD == 2 ~ 0,
TRUE ~ NA_real_
),
# PAISES
EEUU = case_when(
EEUU == "Cariño" ~ 2,
EEUU == "Positiva" ~ 1,
EEUU == "Indiferencia / desconocimiento" ~ 0,
EEUU == "Negativa" ~ -1,
EEUU == "Rechazo" ~ -2
),
PALESTINA = case_when(
PALESTINA == "Cariño" ~ 2,
PALESTINA == "Positiva" ~ 1,
PALESTINA == "Indiferencia / desconocimiento" ~ 0,
PALESTINA == "Negativa" ~ -1,
PALESTINA == "Rechazo" ~ -2
),
ISRAEL = case_when(
ISRAEL == "Cariño" ~ 2,
ISRAEL == "Positiva" ~ 1,
ISRAEL == "Indiferencia / desconocimiento" ~ 0,
ISRAEL == "Negativa" ~ -1,
ISRAEL == "Rechazo" ~ -2
),
UCRANIA = case_when(
UCRANIA == "Cariño" ~ 2,
UCRANIA == "Positiva" ~ 1,
UCRANIA == "Indiferencia / desconocimiento" ~ 0,
UCRANIA == "Negativa" ~ -1,
UCRANIA == "Rechazo" ~ -2
),
RUSIA = case_when(
RUSIA == "Cariño" ~ 2,
RUSIA == "Positiva" ~ 1,
RUSIA == "Indiferencia / desconocimiento" ~ 0,
RUSIA == "Negativa" ~ -1,
RUSIA == "Rechazo" ~ -2
),
CHINA = case_when(
CHINA == "Cariño" ~ 2,
CHINA == "Positiva" ~ 1,
CHINA == "Indiferencia / desconocimiento" ~ 0,
CHINA == "Negativa" ~ -1,
CHINA == "Rechazo" ~ -2
),
INGLATERRA = case_when(
INGLATERRA == "Cariño" ~ 2,
INGLATERRA == "Positiva" ~ 1,
INGLATERRA == "Indiferencia / desconocimiento" ~ 0,
INGLATERRA == "Negativa" ~ -1,
INGLATERRA == "Rechazo" ~ -2
),
BOLIVIA = case_when(
BOLIVIA == "Cariño" ~ 2,
BOLIVIA == "Positiva" ~ 1,
BOLIVIA == "Indiferencia / desconocimiento" ~ 0,
BOLIVIA == "Negativa" ~ -1,
BOLIVIA == "Rechazo" ~ -2
),
# DEMOGRAFICAS
GENERO = ifelse(GENERO == "Masculino", 1, 0),
ESTUDIO = case_when(
ESTUDIO == "primario COMPLETO" ~ 0,
ESTUDIO == "Secundario COMPLETO" ~ 1,
ESTUDIO == "terciario o universitario INCOMPLETO" ~ 2,
ESTUDIO == "terciario o universitario COMPLETO" ~ 3,
ESTUDIO == "posgrado o superior" ~ 4
),
PROGRAMA = as.factor(PROGRAMA),
NOTICIAS = as.factor(NOTICIAS),
SOCIECON = as.factor(SOCIECON),
GRUPO = as.factor(GRUPO),
PROV = as.factor(PROV),
# OCUPACIONAL
TRABAJA = ifelse(TRABAJA == "SI", 1, 0),
# POLITICA
ETIQUETA= case_when(
ETIQUETA %in% c("Apartidario","Idealista") ~ "No sabe/ No contesta",
TRUE ~ as.character(ETIQUETA)  # Mantiene los valores originales que no se especificaron
),
ETIQUETA = as.factor(ETIQUETA)
) %>%
select(-TIEMPO)
clean <- survey110 %>%
mutate(
HIJOS = ifelse(survey110$HIJOS == "SI", 1, 0),
N_BUSCA_HIJOS = case_when(
N_BUSCA_HIJOS == "0" ~ 0,
N_BUSCA_HIJOS == "1" ~ 1,
N_BUSCA_HIJOS == "2" ~ 2,
N_BUSCA_HIJOS == "3" ~ 3,
N_BUSCA_HIJOS == "4 o mas" ~ 4
),
NH_EDAD = case_when(
NH_EDAD %in% c("10000", "1") ~ NA_real_,
NH_EDAD == "+30" ~ 31,
TRUE ~ as.numeric(NH_EDAD)
),
# Recategorización de NO_HIJOS_PQ
NO_HIJOS_PQ = case_when(
NO_HIJOS_PQ %in% c("Ya está con los que tengo los amo", "No quiero tener más hijos","Ya estoy demasiado grande") ~
"NO APLICA: QUIERO TENER HIJOS O YA LOS TENGO",
NO_HIJOS_PQ %in% c(
"estoy en otra etapa de mi vida, estudio y no estoy interesada por el momento, pero sí, me gustaría poder terminar mis estudios, trabajar de ello y tener la economía suficiente como para vivir bien y que las aspiraciones crezcan aún con los hijos que tenga",
"Soy muy egoísta",
"Siento que primero tengo que vivir ciertas experiencias que teniendo un hijo me limitaría. Sumado a que para tener hijos también primero quiero estar estable laboral y económicamente, para darle todas las comodidades a mi alcance, en el caso de decidir tener hijos"
) ~ "Que siento que primero necesito vivir muchas cosas yo antes de tener un hijo",
NO_HIJOS_PQ == "Mi edad y situacion economica" ~ "Que quiero mas dinero antes de pensar en un hijo",
NO_HIJOS_PQ == "Aún debatimos en la pareja. No Está cerrado el tema" ~ "que no encuentro la pareja indicada",
NO_HIJOS_PQ %in% c("Que los quiero tener cuando sea un poco más grande", "La edad que tengo") ~ "NO APLICA: QUIERO TENER HIJOS O YA LOS TENGO",
TRUE ~ as.character(NO_HIJOS_PQ)  # Mantiene los valores originales que no se especificaron
),
NO_HIJOS_PQ = as.factor(NO_HIJOS_PQ),  # Convertir a factor al final
# Variables de acuerdo-desacuerdo
UP = ifelse(UP == "DE ACUERDO", 1, 0),
MASCOTHIJO = ifelse(MASCOTHIJO == "DE ACUERDO", 1, 0),
GORRA = ifelse(GORRA == "DE ACUERDO", 1, 0),
EF = ifelse(EF == "DE ACUERDO", 1, 0),
EJERCITO = ifelse(EJERCITO == "DE ACUERDO", 1, 0),
TARIFAS = ifelse(TARIFAS == "DE ACUERDO", 1, 0),
EMPRESARIOS = ifelse(EMPRESARIOS == "DE ACUERDO", 1, 0),
# SIGNIFICANTES
MALVINAS = ifelse(MALVINAS == 1, 1, 0),
EF_QUEES = ifelse(EF_QUEES == 1, 1, 0),
EL_PROBLEMA = ifelse(EL_PROBLEMA == "Hay pocos que tienen mucho dinero", 1, 0),
NO_PIENSAN = case_when(
NO_PIENSAN == "Tiene mas educación o dinero que yo" ~ 1,
NO_PIENSAN == "Tiene menos educacion o dinero que yo" ~ 0,
TRUE ~ NA_real_
),
DESIGUALDAD = case_when(
DESIGUALDAD == 1 ~ 1,
DESIGUALDAD == 2 ~ 0,
TRUE ~ NA_real_
),
# PAISES
EEUU = case_when(
EEUU == "Cariño" ~ 2,
EEUU == "Positiva" ~ 1,
EEUU == "Indiferencia / desconocimiento" ~ 0,
EEUU == "Negativa" ~ -1,
EEUU == "Rechazo" ~ -2
),
PALESTINA = case_when(
PALESTINA == "Cariño" ~ 2,
PALESTINA == "Positiva" ~ 1,
PALESTINA == "Indiferencia / desconocimiento" ~ 0,
PALESTINA == "Negativa" ~ -1,
PALESTINA == "Rechazo" ~ -2
),
ISRAEL = case_when(
ISRAEL == "Cariño" ~ 2,
ISRAEL == "Positiva" ~ 1,
ISRAEL == "Indiferencia / desconocimiento" ~ 0,
ISRAEL == "Negativa" ~ -1,
ISRAEL == "Rechazo" ~ -2
),
UCRANIA = case_when(
UCRANIA == "Cariño" ~ 2,
UCRANIA == "Positiva" ~ 1,
UCRANIA == "Indiferencia / desconocimiento" ~ 0,
UCRANIA == "Negativa" ~ -1,
UCRANIA == "Rechazo" ~ -2
),
RUSIA = case_when(
RUSIA == "Cariño" ~ 2,
RUSIA == "Positiva" ~ 1,
RUSIA == "Indiferencia / desconocimiento" ~ 0,
RUSIA == "Negativa" ~ -1,
RUSIA == "Rechazo" ~ -2
),
CHINA = case_when(
CHINA == "Cariño" ~ 2,
CHINA == "Positiva" ~ 1,
CHINA == "Indiferencia / desconocimiento" ~ 0,
CHINA == "Negativa" ~ -1,
CHINA == "Rechazo" ~ -2
),
INGLATERRA = case_when(
INGLATERRA == "Cariño" ~ 2,
INGLATERRA == "Positiva" ~ 1,
INGLATERRA == "Indiferencia / desconocimiento" ~ 0,
INGLATERRA == "Negativa" ~ -1,
INGLATERRA == "Rechazo" ~ -2
),
BOLIVIA = case_when(
BOLIVIA == "Cariño" ~ 2,
BOLIVIA == "Positiva" ~ 1,
BOLIVIA == "Indiferencia / desconocimiento" ~ 0,
BOLIVIA == "Negativa" ~ -1,
BOLIVIA == "Rechazo" ~ -2
),
# DEMOGRAFICAS
GENERO = ifelse(GENERO == "Masculino", 1, 0),
ESTUDIO = case_when(
ESTUDIO == "primario COMPLETO" ~ 0,
ESTUDIO == "Secundario COMPLETO" ~ 1,
ESTUDIO == "terciario o universitario INCOMPLETO" ~ 2,
ESTUDIO == "terciario o universitario COMPLETO" ~ 3,
ESTUDIO == "posgrado o superior" ~ 4
),
PROGRAMA = as.factor(PROGRAMA),
NOTICIAS = as.factor(NOTICIAS),
SOCIECON = case_when(
SOCIECON == "Clase baja" ~ 0,
SOCIECON == "Clase media baja" ~ 1,
SOCIECON == "Clase media alta" ~ 2,
SOCIECON == "Clase alta" ~ 3
),
GRUPO = as.factor(GRUPO),
PROV = as.factor(PROV),
# OCUPACIONAL
TRABAJA = ifelse(TRABAJA == "SI", 1, 0),
# POLITICA
ETIQUETA= case_when(
ETIQUETA %in% c("Apartidario","Idealista") ~ "No sabe/ No contesta",
TRUE ~ as.character(ETIQUETA)  # Mantiene los valores originales que no se especificaron
),
ETIQUETA = as.factor(ETIQUETA)
) %>%
select(-TIEMPO)
# Convertir a data.table
clean_datatable <- as.data.table(clean)
# Aplicar one-hot encoding solo a las columnas necesarias
data_encoded <- one_hot(clean_datatable, cols = c("BUSCA_HIJOS", "SS", "NO_HIJOS_PQ","PROGRAMA","NOTICIAS","GRUPO",
"PROLE"))
data_encoded<-data_encoded %>%
select(-PROV)
##### TEST XGBOOST #####
skimr(data_encoded)
##### TEST XGBOOST #####
skim(data_encoded)
#
# En este script se utiliza xgboost para clasificar variedades de vinos del dataset wine
# presente en https://archive.ics.uci.edu/dataset/109/wine
#
# Cargo una librería que posee el dataset "wine" para no descargarlo
library("HDclassif")
#
# En este script se utiliza xgboost para clasificar variedades de vinos del dataset wine
# presente en https://archive.ics.uci.edu/dataset/109/wine
#
# Cargo una librería que posee el dataset "wine" para no descargarlo
install.packages("HDclassif")
library("HDclassif")
data("wine")
# Ver los nombres de las columnas actuales
print(colnames(wine))
# Definir nuevos nombres en español en minúsculas para las columnas (sin la columna de clase)
nuevos_nombres <- c("clase", "alcohol", "ácido_málico", "ceniza", "alcalinidad_de_la_ceniza",
"magnesio", "fenoles_totales", "flavonoides", "fenoles_no_flavonoides",
"proantocianidinas", "intensidad_de_color", "matiz",
"od280_od315_de_vinos_diluidos", "proline")
# Cambiar los nombres de las columnas
colnames(wine) <- nuevos_nombres
# Cambiar el orden de las columnas
wine <- wine[, c(2:length(wine), 1)]
View(wine)
# Convertimos la variable de clase "clase" a factor
wine$clase <- as.factor(wine$clase)
# Verificar los nuevos nombres en minúsculas y la ubicación de la columna de clase
print(colnames(wine))
# Separamos en train y test
library(dplyr)
set.seed(1)
wine_train <- sample_frac(wine, .70)
wine_test <- setdiff(wine, wine_train)
# Cargar la librería xgboost
library(xgboost)
# Cargar la librería xgboost
install.packages("xgboost")
library(xgboost)
# Crear una matriz de características y un vector de etiquetas
X_train <- as.matrix(wine_train[, -which(names(wine_train) == "clase")])  # Excluir la columna de clase
y_train <- as.numeric(wine_train$clase)   # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
X_test <- as.matrix(wine_test[, -which(names(wine_test) == "clase")])  # Excluir la columna de clase
y_test <- as.numeric(wine_test$clase)     # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
View(wine)
# Convertir etiquetas a números enteros y restar 1
y_train <- as.integer(wine_train$clase) - 1
y_test <- as.integer(wine_test$clase) - 1
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Crear una matriz de características y un vector de etiquetas
X_train <- as.matrix(wine_train[, -which(names(wine_train) == "clase")])  # Excluir la columna de clase
y_train <- as.numeric(wine_train$clase)   # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
X_test <- as.matrix(wine_test[, -which(names(wine_test) == "clase")])  # Excluir la columna de clase
y_test <- as.numeric(wine_test$clase)     # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
# Convertir etiquetas a números enteros y restar 1
y_train <- as.integer(wine_train$clase) - 1
y_test <- as.integer(wine_test$clase) - 1
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
all.equal(colnames(X_train), colnames(X_test))
# Crear una matriz de características y un vector de etiquetas
X_train <- as.matrix(wine_train[, -which(names(wine_train) == "clase")])  # Excluir la columna de clase
y_train <- as.numeric(wine_train$clase)   # Mantener la clase como factor
y_train <- as.factor(wine_train$clase)   # Mantener la clase como factor
y_test <- as.factor(wine_test$clase)     # Mantener la clase como factor
# Crear una matriz de características y un vector de etiquetas
X_train <- as.matrix(wine_train[, -which(names(wine_train) == "clase")])  # Excluir la columna de clase
y_train <- as.factor(wine_train$clase)   # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
X_test <- as.matrix(wine_test[, -which(names(wine_test) == "clase")])  # Excluir la columna de clase
y_test <- as.factor(wine_test$clase)     # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
# Convertir etiquetas a números enteros y restar 1
y_train <- as.integer(wine_train$clase) - 1
y_test <- as.integer(wine_test$clase) - 1
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
# Convertimos las predicciones a factor y las y a factor
predicciones_xgboost <- as.factor(predicciones_xgboost)
y_train <- as.factor(y_train)
y_test <- as.factor(y_test)
# Verificar las predicciones
print(predicciones_xgboost)
# Crear una matriz de características y un vector de etiquetas
X_train <- as.matrix(wine_train[, -which(names(wine_train) == "clase")])  # Excluir la columna de clase
y_train <- as.factor(wine_train$clase)   # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
X_test <- as.matrix(wine_test[, -which(names(wine_test) == "clase")])  # Excluir la columna de clase
y_test <- as.factor(wine_test$clase)     # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Convertir etiquetas a números enteros y restar 1
y_train <- as.integer(wine_train$clase) - 1
y_test <- as.integer(wine_test$clase) - 1
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
X_train <- data.matrix(wine_train[, -which(names(wine_train) == "clase")])
y_train <- as.integer(wine_train$clase)   # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
X_test <- data.matrix(wine_test[, -which(names(wine_test) == "clase")])
y_test <- as.integer(wine_test$clase)     # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
# Convertir etiquetas a números enteros y restar 1
y_train <- as.integer(wine_train$clase) - 1
y_test <- as.integer(wine_test$clase) - 1
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
str(X_train)
str(X_test)
View(wine)
#
# En este script se utiliza xgboost para clasificar variedades de vinos del dataset wine
# presente en https://archive.ics.uci.edu/dataset/109/wine
#
# Cargo una librería que posee el dataset "wine" para no descargarlo
library("HDclassif")
data("wine")
# Definir nuevos nombres en español en minúsculas para las columnas (sin la columna de clase)
nuevos_nombres <- c("clase", "alcohol", "ácido_málico", "ceniza", "alcalinidad_de_la_ceniza",
"magnesio", "fenoles_totales", "flavonoides", "fenoles_no_flavonoides",
"proantocianidinas", "intensidad_de_color", "matiz",
"od280_od315_de_vinos_diluidos", "proline")
# Cambiar los nombres de las columnas
colnames(wine) <- nuevos_nombres
# Cambiar el orden de las columnas
wine <- wine[, c(2:length(wine), 1)]
# Convertimos la variable de clase "clase" a factor
wine$clase <- as.factor(wine$clase)
# Verificar los nuevos nombres en minúsculas y la ubicación de la columna de clase
print(colnames(wine))
# Separamos en train y test
library(dplyr)
set.seed(1)
wine_train <- sample_frac(wine, .70)
wine_test <- setdiff(wine, wine_train)
# Cargar la librería xgboost
library(xgboost)
# Crear una matriz de características y un vector de etiquetas
X_train <- as.matrix(wine_train[, -which(names(wine_train) == "clase")])  # Excluir la columna de clase
y_train <- as.numeric(wine_train$clase)   # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
X_test <- as.matrix(wine_test[, -which(names(wine_test) == "clase")])  # Excluir la columna de clase
y_test <- as.numeric(wine_test$clase)     # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
# Convertir etiquetas a números enteros y restar 1
y_train <- as.integer(wine_train$clase) - 1
y_test <- as.integer(wine_test$clase) - 1
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
View(X_train)
View(X_test)
identical(colnames(X_train), colnames(X_test))
X_train <- as.matrix(select(wine_train, -clase))
X_test <- as.matrix(select(wine_test, -clase))
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
#
# En este script se utiliza xgboost para clasificar variedades de vinos del dataset wine
# presente en https://archive.ics.uci.edu/dataset/109/wine
#
# Cargo una librería que posee el dataset "wine" para no descargarlo
library("HDclassif")
data("wine")
# Definir nuevos nombres en español en minúsculas para las columnas (sin la columna de clase)
nuevos_nombres <- c("clase", "alcohol", "ácido_málico", "ceniza", "alcalinidad_de_la_ceniza",
"magnesio", "fenoles_totales", "flavonoides", "fenoles_no_flavonoides",
"proantocianidinas", "intensidad_de_color", "matiz",
"od280_od315_de_vinos_diluidos", "proline")
# Cambiar los nombres de las columnas
colnames(wine) <- nuevos_nombres
# Cambiar el orden de las columnas
wine <- wine[, c(2:length(wine), 1)]
# Convertimos la variable de clase "clase" a factor
wine$clase <- as.factor(wine$clase)
# Verificar los nuevos nombres en minúsculas y la ubicación de la columna de clase
print(colnames(wine))
# Separamos en train y test
library(dplyr)
set.seed(1)
wine_train <- sample_frac(wine, .70)
wine_test <- setdiff(wine, wine_train)
# Cargar la librería xgboost
library(xgboost)
# Crear una matriz de características y un vector de etiquetas
X_train <- as.matrix(wine_train[, -which(names(wine_train) == "clase")])  # Excluir la columna de clase
y_train <- as.numeric(wine_train$clase)   # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_train <- apply(X_train, 2, as.numeric)
X_test <- as.matrix(wine_test[, -which(names(wine_test) == "clase")])  # Excluir la columna de clase
y_test <- as.numeric(wine_test$clase)     # Mantener la clase como factor
# Convertir todas las columnas de la matriz a numéricas
# (por alguna razón as.matrix las pasa a factor)
X_test <- apply(X_test, 2, as.numeric)
# Convertir etiquetas a números enteros y restar 1
y_train <- as.integer(wine_train$clase) - 1
y_test <- as.integer(wine_test$clase) - 1
# Entrenar el modelo XGBoost
modelo_xgboost <- xgboost(data = X_train, label = y_train, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
# Realizar predicciones con el modelo XGBoost
predicciones_xgboost <- predict(modelo_xgboost, newdata = X_test)
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
modelo_xgboost <- xgboost(data = dtrain, nrounds = 100,
objective = "multi:softmax", num_class = length(unique(y_train)))
predicciones_xgboost <- predict(modelo_xgboost, newdata = dtest)
all(nchar(colnames(X_train)) == nchar(colnames(X_test))) &&
all(strsplit(colnames(X_train), "") == strsplit(colnames(X_test), ""))
